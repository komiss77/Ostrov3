--- a/net/minecraft/world/level/block/DecoratedPotBlock.java
+++ b/net/minecraft/world/level/block/DecoratedPotBlock.java
@@ -19,6 +19,7 @@
 import net.minecraft.world.Containers;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.Projectile;
@@ -43,6 +44,7 @@
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.pathfinder.PathComputationType;
@@ -53,6 +55,7 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class DecoratedPotBlock extends BaseEntityBlock implements SimpleWaterloggedBlock {
+
     public static final MapCodec<DecoratedPotBlock> CODEC = simpleCodec(DecoratedPotBlock::new);
     public static final ResourceLocation SHERDS_DYNAMIC_DROP_ID = new ResourceLocation("sherds");
     private static final VoxelShape BOUNDING_BOX = Block.box(1.0D, 0.0D, 1.0D, 15.0D, 16.0D, 15.0D);
@@ -62,18 +65,18 @@
 
     @Override
     public MapCodec<DecoratedPotBlock> codec() {
-        return CODEC;
+        return DecoratedPotBlock.CODEC;
     }
 
     protected DecoratedPotBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(HORIZONTAL_FACING, Direction.NORTH).setValue(WATERLOGGED, Boolean.valueOf(false)).setValue(CRACKED, Boolean.valueOf(false)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DecoratedPotBlock.HORIZONTAL_FACING, Direction.NORTH)).setValue(DecoratedPotBlock.WATERLOGGED, false)).setValue(DecoratedPotBlock.CRACKED, false));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if ((Boolean) state.getValue(DecoratedPotBlock.WATERLOGGED)) {
+            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -81,45 +84,52 @@
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        FluidState fluidState = ctx.getLevel().getFluidState(ctx.getClickedPos());
-        return this.defaultBlockState().setValue(HORIZONTAL_FACING, ctx.getHorizontalDirection()).setValue(WATERLOGGED, Boolean.valueOf(fluidState.getType() == Fluids.WATER)).setValue(CRACKED, Boolean.valueOf(false));
+        FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
+
+        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(DecoratedPotBlock.HORIZONTAL_FACING, ctx.getHorizontalDirection())).setValue(DecoratedPotBlock.WATERLOGGED, fluid.getType() == Fluids.WATER)).setValue(DecoratedPotBlock.CRACKED, false);
     }
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        BlockEntity itemStack = world.getBlockEntity(pos);
-        if (itemStack instanceof DecoratedPotBlockEntity decoratedPotBlockEntity) {
+        BlockEntity tileentity = world.getBlockEntity(pos);
+
+        if (tileentity instanceof DecoratedPotBlockEntity) {
+            DecoratedPotBlockEntity decoratedpotblockentity = (DecoratedPotBlockEntity) tileentity;
+
             if (world.isClientSide) {
                 return InteractionResult.CONSUME;
             } else {
-                ItemStack itemStack = player.getItemInHand(hand);
-                ItemStack itemStack2 = decoratedPotBlockEntity.getTheItem();
-                if (!itemStack.isEmpty() && (itemStack2.isEmpty() || ItemStack.isSameItemSameTags(itemStack2, itemStack) && itemStack2.getCount() < itemStack2.getMaxStackSize())) {
-                    decoratedPotBlockEntity.wobble(DecoratedPotBlockEntity.WobbleStyle.POSITIVE);
-                    player.awardStat(Stats.ITEM_USED.get(itemStack.getItem()));
-                    ItemStack itemStack3 = player.isCreative() ? itemStack.copyWithCount(1) : itemStack.split(1);
+                ItemStack itemstack = player.getItemInHand(hand);
+                ItemStack itemstack1 = decoratedpotblockentity.getTheItem();
+
+                if (!itemstack.isEmpty() && (itemstack1.isEmpty() || ItemStack.isSameItemSameTags(itemstack1, itemstack) && itemstack1.getCount() < itemstack1.getMaxStackSize())) {
+                    decoratedpotblockentity.wobble(DecoratedPotBlockEntity.WobbleStyle.POSITIVE);
+                    player.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
+                    ItemStack itemstack2 = player.isCreative() ? itemstack.copyWithCount(1) : itemstack.split(1);
                     float f;
-                    if (decoratedPotBlockEntity.isEmpty()) {
-                        decoratedPotBlockEntity.setTheItem(itemStack3);
-                        f = (float)itemStack3.getCount() / (float)itemStack3.getMaxStackSize();
+
+                    if (decoratedpotblockentity.isEmpty()) {
+                        decoratedpotblockentity.setTheItem(itemstack2);
+                        f = (float) itemstack2.getCount() / (float) itemstack2.getMaxStackSize();
                     } else {
-                        itemStack2.grow(1);
-                        f = (float)itemStack2.getCount() / (float)itemStack2.getMaxStackSize();
+                        itemstack1.grow(1);
+                        f = (float) itemstack1.getCount() / (float) itemstack1.getMaxStackSize();
                     }
 
-                    world.playSound((Player)null, pos, SoundEvents.DECORATED_POT_INSERT, SoundSource.BLOCKS, 1.0F, 0.7F + 0.5F * f);
+                    world.playSound((Player) null, pos, SoundEvents.DECORATED_POT_INSERT, SoundSource.BLOCKS, 1.0F, 0.7F + 0.5F * f);
                     if (world instanceof ServerLevel) {
-                        ServerLevel serverLevel = (ServerLevel)world;
-                        serverLevel.sendParticles(ParticleTypes.DUST_PLUME, (double)pos.getX() + 0.5D, (double)pos.getY() + 1.2D, (double)pos.getZ() + 0.5D, 7, 0.0D, 0.0D, 0.0D, 0.0D);
+                        ServerLevel worldserver = (ServerLevel) world;
+
+                        worldserver.sendParticles(ParticleTypes.DUST_PLUME, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.2D, (double) pos.getZ() + 0.5D, 7, 0.0D, 0.0D, 0.0D, 0.0D);
                     }
 
-                    decoratedPotBlockEntity.setChanged();
+                    decoratedpotblockentity.setChanged();
                 } else {
-                    world.playSound((Player)null, pos, SoundEvents.DECORATED_POT_INSERT_FAIL, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    decoratedPotBlockEntity.wobble(DecoratedPotBlockEntity.WobbleStyle.NEGATIVE);
+                    world.playSound((Player) null, pos, SoundEvents.DECORATED_POT_INSERT_FAIL, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    decoratedpotblockentity.wobble(DecoratedPotBlockEntity.WobbleStyle.NEGATIVE);
                 }
 
-                world.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
+                world.gameEvent((Entity) player, GameEvent.BLOCK_CHANGE, pos);
                 return InteractionResult.SUCCESS;
             }
         } else {
@@ -130,8 +140,8 @@
     @Override
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, @Nullable LivingEntity placer, ItemStack itemStack) {
         if (world.isClientSide) {
-            world.getBlockEntity(pos, BlockEntityType.DECORATED_POT).ifPresent((blockEntity) -> {
-                blockEntity.setFromItem(itemStack);
+            world.getBlockEntity(pos, BlockEntityType.DECORATED_POT).ifPresent((decoratedpotblockentity) -> {
+                decoratedpotblockentity.setFromItem(itemStack);
             });
         }
 
@@ -144,12 +154,12 @@
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return BOUNDING_BOX;
+        return DecoratedPotBlock.BOUNDING_BOX;
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(HORIZONTAL_FACING, WATERLOGGED, CRACKED);
+        builder.add(DecoratedPotBlock.HORIZONTAL_FACING, DecoratedPotBlock.WATERLOGGED, DecoratedPotBlock.CRACKED);
     }
 
     @Nullable
@@ -166,10 +176,13 @@
 
     @Override
     public List<ItemStack> getDrops(BlockState state, LootParams.Builder builder) {
-        BlockEntity blockEntity = builder.getOptionalParameter(LootContextParams.BLOCK_ENTITY);
-        if (blockEntity instanceof DecoratedPotBlockEntity decoratedPotBlockEntity) {
-            builder.withDynamicDrop(SHERDS_DYNAMIC_DROP_ID, (lootConsumer) -> {
-                decoratedPotBlockEntity.getDecorations().sorted().map(Item::getDefaultInstance).forEach(lootConsumer);
+        BlockEntity tileentity = (BlockEntity) builder.getOptionalParameter(LootContextParams.BLOCK_ENTITY);
+
+        if (tileentity instanceof DecoratedPotBlockEntity) {
+            DecoratedPotBlockEntity decoratedpotblockentity = (DecoratedPotBlockEntity) tileentity;
+
+            builder.withDynamicDrop(DecoratedPotBlock.SHERDS_DYNAMIC_DROP_ID, (consumer) -> {
+                decoratedpotblockentity.getDecorations().sorted().map(Item::getDefaultInstance).forEach(consumer);
             });
         }
 
@@ -178,53 +191,64 @@
 
     @Override
     public BlockState playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
-        ItemStack itemStack = player.getMainHandItem();
-        BlockState blockState = state;
-        if (itemStack.is(ItemTags.BREAKS_DECORATED_POTS) && !EnchantmentHelper.hasSilkTouch(itemStack)) {
-            blockState = state.setValue(CRACKED, Boolean.valueOf(true));
-            world.setBlock(pos, blockState, 4);
+        ItemStack itemstack = player.getMainHandItem();
+        BlockState iblockdata1 = state;
+
+        if (itemstack.is(ItemTags.BREAKS_DECORATED_POTS) && !EnchantmentHelper.hasSilkTouch(itemstack)) {
+            iblockdata1 = (BlockState) state.setValue(DecoratedPotBlock.CRACKED, true);
+            world.setBlock(pos, iblockdata1, 4);
         }
 
-        return super.playerWillDestroy(world, pos, blockState, player);
+        return super.playerWillDestroy(world, pos, iblockdata1, player);
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return (Boolean) state.getValue(DecoratedPotBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public SoundType getSoundType(BlockState state) {
-        return state.getValue(CRACKED) ? SoundType.DECORATED_POT_CRACKED : SoundType.DECORATED_POT;
+        return (Boolean) state.getValue(DecoratedPotBlock.CRACKED) ? SoundType.DECORATED_POT_CRACKED : SoundType.DECORATED_POT;
     }
 
     @Override
     public void appendHoverText(ItemStack stack, @Nullable BlockGetter world, List<Component> tooltip, TooltipFlag options) {
         super.appendHoverText(stack, world, tooltip, options);
-        DecoratedPotBlockEntity.Decorations decorations = DecoratedPotBlockEntity.Decorations.load(BlockItem.getBlockEntityData(stack));
-        if (!decorations.equals(DecoratedPotBlockEntity.Decorations.EMPTY)) {
+        DecoratedPotBlockEntity.Decorations decoratedpotblockentity_decoration = DecoratedPotBlockEntity.Decorations.load(BlockItem.getBlockEntityData(stack));
+
+        if (!decoratedpotblockentity_decoration.equals(DecoratedPotBlockEntity.Decorations.EMPTY)) {
             tooltip.add(CommonComponents.EMPTY);
-            Stream.of(decorations.front(), decorations.left(), decorations.right(), decorations.back()).forEach((sherd) -> {
-                tooltip.add((new ItemStack(sherd, 1)).getHoverName().plainCopy().withStyle(ChatFormatting.GRAY));
+            Stream.of(decoratedpotblockentity_decoration.front(), decoratedpotblockentity_decoration.left(), decoratedpotblockentity_decoration.right(), decoratedpotblockentity_decoration.back()).forEach((item) -> {
+                tooltip.add((new ItemStack(item, 1)).getHoverName().plainCopy().withStyle(ChatFormatting.GRAY));
             });
         }
     }
 
     @Override
     public void onProjectileHit(Level world, BlockState state, BlockHitResult hit, Projectile projectile) {
-        BlockPos blockPos = hit.getBlockPos();
-        if (!world.isClientSide && projectile.mayInteract(world, blockPos) && projectile.mayBreak(world)) {
-            world.setBlock(blockPos, state.setValue(CRACKED, Boolean.valueOf(true)), 4);
-            world.destroyBlock(blockPos, true, projectile);
+        BlockPos blockposition = hit.getBlockPos();
+
+        if (!world.isClientSide && projectile.mayInteract(world, blockposition) && projectile.mayBreak(world)) {
+            // CraftBukkit start - call EntityChangeBlockEvent
+            if (!org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory.callEntityChangeBlockEvent(projectile, blockposition, this.getFluidState(state).createLegacyBlock())) {
+                return;
+            }
+            // CraftBukkit end
+            world.setBlock(blockposition, (BlockState) state.setValue(DecoratedPotBlock.CRACKED, true), 4);
+            world.destroyBlock(blockposition, true, projectile);
         }
 
     }
 
     @Override
     public ItemStack getCloneItemStack(LevelReader world, BlockPos pos, BlockState state) {
-        BlockEntity var5 = world.getBlockEntity(pos);
-        if (var5 instanceof DecoratedPotBlockEntity decoratedPotBlockEntity) {
-            return decoratedPotBlockEntity.getPotAsItem();
+        BlockEntity tileentity = world.getBlockEntity(pos);
+
+        if (tileentity instanceof DecoratedPotBlockEntity) {
+            DecoratedPotBlockEntity decoratedpotblockentity = (DecoratedPotBlockEntity) tileentity;
+
+            return decoratedpotblockentity.getPotAsItem();
         } else {
             return super.getCloneItemStack(world, pos, state);
         }
