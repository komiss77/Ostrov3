--- a/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -17,6 +17,7 @@
     @Nullable
     public ResourceLocation lootTable;
     public long lootTableSeed;
+    public final com.destroystokyo.paper.loottable.PaperLootableInventoryData lootableData = new com.destroystokyo.paper.loottable.PaperLootableInventoryData(new com.destroystokyo.paper.loottable.PaperTileEntityLootableInventory(this)); // Paper
 
     protected RandomizableContainerBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
         super(type, pos, state);
@@ -43,15 +44,68 @@
         this.lootTableSeed = lootTableSeed;
     }
 
+    // Paper start
+    @Override
+    public boolean tryLoadLootTable(final net.minecraft.nbt.CompoundTag nbt) {
+        // Copied from super with changes, always check the original method
+        this.lootableData.loadNbt(nbt); // Paper
+        if (nbt.contains("LootTable", 8)) {
+            this.setLootTable(ResourceLocation.tryParse(nbt.getString("LootTable")));
+            try { org.bukkit.craftbukkit.v1_20_R3.util.CraftNamespacedKey.fromMinecraft(this.lootTable); } catch (IllegalArgumentException ex) { this.lootTable = null; } // Paper - validate
+            this.setLootTableSeed(nbt.getLong("LootTableSeed"));
+            return false; // Paper - always load the items, table may still remain
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public boolean trySaveLootTable(final net.minecraft.nbt.CompoundTag nbt) {
+        this.lootableData.saveNbt(nbt);
+        RandomizableContainer.super.trySaveLootTable(nbt);
+        return false;
+    }
+
+    @Override
+    public void unpackLootTable(@org.jetbrains.annotations.Nullable final Player player) {
+        // Copied from super with changes, always check the original method
+        net.minecraft.world.level.Level level = this.getLevel();
+        BlockPos blockPos = this.getBlockPos();
+        ResourceLocation resourceLocation = this.getLootTable();
+        if (this.lootableData.shouldReplenish(player) && level != null) { // Paper
+            net.minecraft.world.level.storage.loot.LootTable lootTable = level.getServer().getLootData().getLootTable(resourceLocation);
+            if (player instanceof net.minecraft.server.level.ServerPlayer) {
+                net.minecraft.advancements.CriteriaTriggers.GENERATE_LOOT.trigger((net.minecraft.server.level.ServerPlayer)player, resourceLocation);
+            }
+
+            this.lootableData.processRefill(player); // Paper
+            net.minecraft.world.level.storage.loot.LootParams.Builder builder = (new net.minecraft.world.level.storage.loot.LootParams.Builder((net.minecraft.server.level.ServerLevel)level)).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.ORIGIN, net.minecraft.world.phys.Vec3.atCenterOf(blockPos));
+            if (player != null) {
+                builder.withLuck(player.getLuck()).withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParams.THIS_ENTITY, player);
+            }
+
+            lootTable.fill(this, builder.create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSets.CHEST), this.getLootTableSeed());
+        }
+
+    }
+    // Paper end
+
     @Override
     public boolean isEmpty() {
         this.unpackLootTable((Player)null);
-        return this.getItems().stream().allMatch(ItemStack::isEmpty);
+        // Paper start - Perf: Optimize Hoppers
+        for (final ItemStack itemStack : this.getItems()) {
+            if (!itemStack.isEmpty()) {
+                return false;
+            }
+        }
+        return true;
+        // Paper end - Perf: Optimize Hoppers
     }
 
     @Override
     public ItemStack getItem(int slot) {
-        this.unpackLootTable((Player)null);
+        if (slot == 0) this.unpackLootTable((Player) null); // Paper - Perf: Optimize Hoppers
         return this.getItems().get(slot);
     }
 
