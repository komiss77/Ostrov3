--- a/net/minecraft/nbt/ListTag.java
+++ b/net/minecraft/nbt/ListTag.java
@@ -5,43 +5,47 @@
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Objects;
 
 public class ListTag extends CollectionTag<Tag> {
+
     private static final int SELF_SIZE_IN_BYTES = 37;
     public static final TagType<ListTag> TYPE = new TagType.VariableSize<ListTag>() {
         @Override
-        public ListTag load(DataInput dataInput, NbtAccounter nbtAccounter) throws IOException {
-            nbtAccounter.pushDepth();
+        public ListTag load(DataInput input, NbtAccounter tracker) throws IOException {
+            tracker.pushDepth();
+
+            ListTag nbttaglist;
 
-            ListTag var3;
             try {
-                var3 = loadList(dataInput, nbtAccounter);
+                nbttaglist = loadList(input, tracker);
             } finally {
-                nbtAccounter.popDepth();
+                tracker.popDepth();
             }
 
-            return var3;
+            return nbttaglist;
         }
 
         private static ListTag loadList(DataInput input, NbtAccounter tracker) throws IOException {
             tracker.accountBytes(37L);
-            byte b = input.readByte();
+            byte b0 = input.readByte();
             int i = input.readInt();
-            if (b == 0 && i > 0) {
+
+            if (b0 == 0 && i > 0) {
                 throw new NbtFormatException("Missing type on ListTag");
             } else {
-                tracker.accountBytes(4L, (long)i);
-                TagType<?> tagType = TagTypes.getType(b);
+                tracker.accountBytes(4L, (long) i);
+                TagType<?> nbttagtype = TagTypes.getType(b0);
                 List<Tag> list = Lists.newArrayListWithCapacity(i);
 
-                for(int j = 0; j < i; ++j) {
-                    list.add(tagType.load(input, tracker));
+                for (int j = 0; j < i; ++j) {
+                    list.add(nbttagtype.load(input, tracker));
                 }
 
-                return new ListTag(list, b);
+                return new ListTag(list, b0);
             }
         }
 
@@ -49,63 +53,66 @@
         public StreamTagVisitor.ValueResult parse(DataInput input, StreamTagVisitor visitor, NbtAccounter tracker) throws IOException {
             tracker.pushDepth();
 
-            StreamTagVisitor.ValueResult var4;
+            StreamTagVisitor.ValueResult streamtagvisitor_b;
+
             try {
-                var4 = parseList(input, visitor, tracker);
+                streamtagvisitor_b = parseList(input, visitor, tracker);
             } finally {
                 tracker.popDepth();
             }
 
-            return var4;
+            return streamtagvisitor_b;
         }
 
         private static StreamTagVisitor.ValueResult parseList(DataInput input, StreamTagVisitor visitor, NbtAccounter tracker) throws IOException {
             tracker.accountBytes(37L);
-            TagType<?> tagType = TagTypes.getType(input.readByte());
+            TagType<?> nbttagtype = TagTypes.getType(input.readByte());
             int i = input.readInt();
-            switch (visitor.visitList(tagType, i)) {
+
+            switch (visitor.visitList(nbttagtype, i)) {
                 case HALT:
                     return StreamTagVisitor.ValueResult.HALT;
                 case BREAK:
-                    tagType.skip(input, i, tracker);
+                    nbttagtype.skip(input, i, tracker);
                     return visitor.visitContainerEnd();
                 default:
-                    tracker.accountBytes(4L, (long)i);
+                    tracker.accountBytes(4L, (long) i);
                     int j = 0;
 
-                    while(true) {
-                        label45: {
-                            if (j < i) {
-                                switch (visitor.visitElement(tagType, j)) {
+                    while (true) {
+                        if (j < i) {
+                            label31:
+                            {
+                                switch (visitor.visitElement(nbttagtype, j)) {
                                     case HALT:
                                         return StreamTagVisitor.ValueResult.HALT;
                                     case BREAK:
-                                        tagType.skip(input, tracker);
-                                        break;
+                                        nbttagtype.skip(input, tracker);
+                                        break label31;
                                     case SKIP:
-                                        tagType.skip(input, tracker);
-                                        break label45;
+                                        nbttagtype.skip(input, tracker);
+                                        break;
                                     default:
-                                        switch (tagType.parse(input, visitor, tracker)) {
+                                        switch (nbttagtype.parse(input, visitor, tracker)) {
                                             case HALT:
                                                 return StreamTagVisitor.ValueResult.HALT;
                                             case BREAK:
-                                                break;
-                                            default:
-                                                break label45;
+                                                break label31;
                                         }
                                 }
-                            }
 
-                            int k = i - 1 - j;
-                            if (k > 0) {
-                                tagType.skip(input, k, tracker);
+                                ++j;
+                                continue;
                             }
+                        }
 
-                            return visitor.visitContainerEnd();
+                        int k = i - 1 - j;
+
+                        if (k > 0) {
+                            nbttagtype.skip(input, k, tracker);
                         }
 
-                        ++j;
+                        return visitor.visitContainerEnd();
                     }
             }
         }
@@ -115,9 +122,10 @@
             tracker.pushDepth();
 
             try {
-                TagType<?> tagType = TagTypes.getType(input.readByte());
+                TagType<?> nbttagtype = TagTypes.getType(input.readByte());
                 int i = input.readInt();
-                tagType.skip(input, i, tracker);
+
+                nbttagtype.skip(input, i, tracker);
             } finally {
                 tracker.popDepth();
             }
@@ -137,13 +145,13 @@
     private final List<Tag> list;
     private byte type;
 
-    ListTag(List<Tag> list, byte type) {
+    public ListTag(List<Tag> list, byte type) { // PAIL: package-private -> public
         this.list = list;
         this.type = type;
     }
 
     public ListTag() {
-        this(Lists.newArrayList(), (byte)0);
+        this(Lists.newArrayList(), (byte) 0);
     }
 
     @Override
@@ -151,25 +159,30 @@
         if (this.list.isEmpty()) {
             this.type = 0;
         } else {
-            this.type = this.list.get(0).getId();
+            this.type = ((Tag) this.list.get(0)).getId();
         }
 
         output.writeByte(this.type);
         output.writeInt(this.list.size());
+        Iterator iterator = this.list.iterator();
 
-        for(Tag tag : this.list) {
-            tag.write(output);
+        while (iterator.hasNext()) {
+            Tag nbtbase = (Tag) iterator.next();
+
+            nbtbase.write(output);
         }
 
     }
 
     @Override
     public int sizeInBytes() {
-        int i = 37;
-        i += 4 * this.list.size();
+        byte b0 = 37;
+        int i = b0 + 4 * this.list.size();
 
-        for(Tag tag : this.list) {
-            i += tag.sizeInBytes();
+        Tag nbtbase;
+
+        for (Iterator iterator = this.list.iterator(); iterator.hasNext(); i += nbtbase.sizeInBytes()) {
+            nbtbase = (Tag) iterator.next();
         }
 
         return i;
@@ -182,7 +195,7 @@
 
     @Override
     public TagType<ListTag> getType() {
-        return TYPE;
+        return ListTag.TYPE;
     }
 
     @Override
@@ -199,21 +212,22 @@
 
     @Override
     public Tag remove(int i) {
-        Tag tag = this.list.remove(i);
+        Tag nbtbase = (Tag) this.list.remove(i);
+
         this.updateTypeAfterRemove();
-        return tag;
+        return nbtbase;
     }
 
-    @Override
     public boolean isEmpty() {
         return this.list.isEmpty();
     }
 
     public CompoundTag getCompound(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 10) {
-                return (CompoundTag)tag;
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 10) {
+                return (CompoundTag) nbtbase;
             }
         }
 
@@ -222,9 +236,10 @@
 
     public ListTag getList(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 9) {
-                return (ListTag)tag;
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 9) {
+                return (ListTag) nbtbase;
             }
         }
 
@@ -233,9 +248,10 @@
 
     public short getShort(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 2) {
-                return ((ShortTag)tag).getAsShort();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 2) {
+                return ((ShortTag) nbtbase).getAsShort();
             }
         }
 
@@ -244,9 +260,10 @@
 
     public int getInt(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 3) {
-                return ((IntTag)tag).getAsInt();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 3) {
+                return ((IntTag) nbtbase).getAsInt();
             }
         }
 
@@ -255,9 +272,10 @@
 
     public int[] getIntArray(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 11) {
-                return ((IntArrayTag)tag).getAsIntArray();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 11) {
+                return ((IntArrayTag) nbtbase).getAsIntArray();
             }
         }
 
@@ -266,9 +284,10 @@
 
     public long[] getLongArray(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 12) {
-                return ((LongArrayTag)tag).getAsLongArray();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 12) {
+                return ((LongArrayTag) nbtbase).getAsLongArray();
             }
         }
 
@@ -277,9 +296,10 @@
 
     public double getDouble(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 6) {
-                return ((DoubleTag)tag).getAsDouble();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 6) {
+                return ((DoubleTag) nbtbase).getAsDouble();
             }
         }
 
@@ -288,9 +308,10 @@
 
     public float getFloat(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            if (tag.getId() == 5) {
-                return ((FloatTag)tag).getAsFloat();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            if (nbtbase.getId() == 5) {
+                return ((FloatTag) nbtbase).getAsFloat();
             }
         }
 
@@ -299,37 +320,37 @@
 
     public String getString(int index) {
         if (index >= 0 && index < this.list.size()) {
-            Tag tag = this.list.get(index);
-            return tag.getId() == 8 ? tag.getAsString() : tag.toString();
+            Tag nbtbase = (Tag) this.list.get(index);
+
+            return nbtbase.getId() == 8 ? nbtbase.getAsString() : nbtbase.toString();
         } else {
             return "";
         }
     }
 
-    @Override
     public int size() {
         return this.list.size();
     }
 
-    @Override
     public Tag get(int i) {
-        return this.list.get(i);
+        return (Tag) this.list.get(i);
     }
 
     @Override
-    public Tag set(int i, Tag tag) {
-        Tag tag2 = this.get(i);
-        if (!this.setTag(i, tag)) {
-            throw new UnsupportedOperationException(String.format(Locale.ROOT, "Trying to add tag of type %d to list of %d", tag.getId(), this.type));
+    public Tag set(int i, Tag nbtbase) {
+        Tag nbtbase1 = this.get(i);
+
+        if (!this.setTag(i, nbtbase)) {
+            throw new UnsupportedOperationException(String.format(Locale.ROOT, "Trying to add tag of type %d to list of %d", nbtbase.getId(), this.type));
         } else {
-            return tag2;
+            return nbtbase1;
         }
     }
 
     @Override
-    public void add(int i, Tag tag) {
-        if (!this.addTag(i, tag)) {
-            throw new UnsupportedOperationException(String.format(Locale.ROOT, "Trying to add tag of type %d to list of %d", tag.getId(), this.type));
+    public void add(int i, Tag nbtbase) {
+        if (!this.addTag(i, nbtbase)) {
+            throw new UnsupportedOperationException(String.format(Locale.ROOT, "Trying to add tag of type %d to list of %d", nbtbase.getId(), this.type));
         }
     }
 
@@ -366,21 +387,16 @@
 
     @Override
     public ListTag copy() {
-        Iterable<Tag> iterable = (Iterable<Tag>)(TagTypes.getType(this.type).isValue() ? this.list : Iterables.transform(this.list, Tag::copy));
-        List<Tag> list = Lists.newArrayList(iterable);
+        Iterable<Tag> iterable = TagTypes.getType(this.type).isValue() ? this.list : Iterables.transform(this.list, Tag::copy);
+        List<Tag> list = Lists.newArrayList((Iterable) iterable);
+
         return new ListTag(list, this.type);
     }
 
-    @Override
     public boolean equals(Object object) {
-        if (this == object) {
-            return true;
-        } else {
-            return object instanceof ListTag && Objects.equals(this.list, ((ListTag)object).list);
-        }
+        return this == object ? true : object instanceof ListTag && Objects.equals(this.list, ((ListTag) object).list);
     }
 
-    @Override
     public int hashCode() {
         return this.list.hashCode();
     }
@@ -395,7 +411,6 @@
         return this.type;
     }
 
-    @Override
     public void clear() {
         this.list.clear();
         this.type = 0;
@@ -411,15 +426,16 @@
             default:
                 int i = 0;
 
-                while(i < this.list.size()) {
-                    Tag tag = this.list.get(i);
-                    switch (visitor.visitElement(tag.getType(), i)) {
+                while (i < this.list.size()) {
+                    Tag nbtbase = (Tag) this.list.get(i);
+
+                    switch (visitor.visitElement(nbtbase.getType(), i)) {
                         case HALT:
                             return StreamTagVisitor.ValueResult.HALT;
                         case BREAK:
                             return visitor.visitContainerEnd();
                         default:
-                            switch (tag.accept(visitor)) {
+                            switch (nbtbase.accept(visitor)) {
                                 case HALT:
                                     return StreamTagVisitor.ValueResult.HALT;
                                 case BREAK:
