--- a/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -9,8 +9,16 @@
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+// CraftBukkit start
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftShapedRecipe;
+import org.bukkit.inventory.RecipeChoice;
+// CraftBukkit end
+
+public class ShapedRecipe extends io.papermc.paper.inventory.recipe.RecipeBookExactChoiceRecipe<CraftingContainer> implements CraftingRecipe { // Paper - improve exact recipe choices
 
-public class ShapedRecipe implements CraftingRecipe {
     final ShapedRecipePattern pattern;
     final ItemStack result;
     final String group;
@@ -23,12 +31,75 @@
         this.pattern = raw;
         this.result = result;
         this.showNotification = showNotification;
+        this.checkExactIngredients(); // Paper - improve exact recipe choices
     }
 
     public ShapedRecipe(String group, CraftingBookCategory category, ShapedRecipePattern raw, ItemStack result) {
         this(group, category, raw, result, true);
     }
 
+    // CraftBukkit start
+    @Override
+    public org.bukkit.inventory.ShapedRecipe toBukkitRecipe(NamespacedKey id) {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+        CraftShapedRecipe recipe = new CraftShapedRecipe(id, result, this);
+        recipe.setGroup(this.group);
+        recipe.setCategory(CraftRecipe.getCategory(this.category()));
+
+        switch (this.pattern.height()) {
+        case 1:
+            switch (this.pattern.width()) {
+            case 1:
+                recipe.shape("a");
+                break;
+            case 2:
+                recipe.shape("ab");
+                break;
+            case 3:
+                recipe.shape("abc");
+                break;
+            }
+            break;
+        case 2:
+            switch (this.pattern.width()) {
+            case 1:
+                recipe.shape("a","b");
+                break;
+            case 2:
+                recipe.shape("ab","cd");
+                break;
+            case 3:
+                recipe.shape("abc","def");
+                break;
+            }
+            break;
+        case 3:
+            switch (this.pattern.width()) {
+            case 1:
+                recipe.shape("a","b","c");
+                break;
+            case 2:
+                recipe.shape("ab","cd","ef");
+                break;
+            case 3:
+                recipe.shape("abc","def","ghi");
+                break;
+            }
+            break;
+        }
+        char c = 'a';
+        for (Ingredient list : this.pattern.ingredients()) {
+            RecipeChoice choice = CraftRecipe.toBukkit(list);
+            if (choice != null) {
+                recipe.setIngredient(c, choice);
+            }
+
+            c++;
+        }
+        return recipe;
+    }
+    // CraftBukkit end
+
     @Override
     public RecipeSerializer<?> getSerializer() {
         return RecipeSerializer.SHAPED_RECIPE;
@@ -64,12 +135,10 @@
         return width >= this.pattern.width() && height >= this.pattern.height();
     }
 
-    @Override
     public boolean matches(CraftingContainer inventory, Level world) {
         return this.pattern.matches(inventory);
     }
 
-    @Override
     public ItemStack assemble(CraftingContainer inventory, RegistryAccess registryManager) {
         return this.getResultItem(registryManager).copy();
     }
@@ -84,45 +153,49 @@
 
     @Override
     public boolean isIncomplete() {
-        NonNullList<Ingredient> nonNullList = this.getIngredients();
-        return nonNullList.isEmpty() || nonNullList.stream().filter((ingredient) -> {
-            return !ingredient.isEmpty();
-        }).anyMatch((ingredient) -> {
-            return ingredient.getItems().length == 0;
+        NonNullList<Ingredient> nonnulllist = this.getIngredients();
+
+        return nonnulllist.isEmpty() || nonnulllist.stream().filter((recipeitemstack) -> {
+            return !recipeitemstack.isEmpty();
+        }).anyMatch((recipeitemstack) -> {
+            return recipeitemstack.getItems().length == 0;
         });
     }
 
     public static class Serializer implements RecipeSerializer<ShapedRecipe> {
+
         public static final Codec<ShapedRecipe> CODEC = RecordCodecBuilder.create((instance) -> {
-            return instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((recipe) -> {
-                return recipe.group;
-            }), CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter((recipe) -> {
-                return recipe.category;
-            }), ShapedRecipePattern.MAP_CODEC.forGetter((recipe) -> {
-                return recipe.pattern;
-            }), ItemStack.ITEM_WITH_COUNT_CODEC.fieldOf("result").forGetter((recipe) -> {
-                return recipe.result;
-            }), ExtraCodecs.strictOptionalField(Codec.BOOL, "show_notification", true).forGetter((recipe) -> {
-                return recipe.showNotification;
+            return instance.group(ExtraCodecs.strictOptionalField(Codec.STRING, "group", "").forGetter((shapedrecipes) -> {
+                return shapedrecipes.group;
+            }), CraftingBookCategory.CODEC.fieldOf("category").orElse(CraftingBookCategory.MISC).forGetter((shapedrecipes) -> {
+                return shapedrecipes.category;
+            }), ShapedRecipePattern.MAP_CODEC.forGetter((shapedrecipes) -> {
+                return shapedrecipes.pattern;
+            }), ItemStack.ITEM_WITH_COUNT_CODEC.fieldOf("result").forGetter((shapedrecipes) -> {
+                return shapedrecipes.result;
+            }), ExtraCodecs.strictOptionalField(Codec.BOOL, "show_notification", true).forGetter((shapedrecipes) -> {
+                return shapedrecipes.showNotification;
             })).apply(instance, ShapedRecipe::new);
         });
 
+        public Serializer() {}
+
         @Override
         public Codec<ShapedRecipe> codec() {
-            return CODEC;
+            return ShapedRecipe.Serializer.CODEC;
         }
 
         @Override
-        public ShapedRecipe fromNetwork(FriendlyByteBuf friendlyByteBuf) {
-            String string = friendlyByteBuf.readUtf();
-            CraftingBookCategory craftingBookCategory = friendlyByteBuf.readEnum(CraftingBookCategory.class);
-            ShapedRecipePattern shapedRecipePattern = ShapedRecipePattern.fromNetwork(friendlyByteBuf);
-            ItemStack itemStack = friendlyByteBuf.readItem();
-            boolean bl = friendlyByteBuf.readBoolean();
-            return new ShapedRecipe(string, craftingBookCategory, shapedRecipePattern, itemStack, bl);
+        public ShapedRecipe fromNetwork(FriendlyByteBuf buf) {
+            String s = buf.readUtf();
+            CraftingBookCategory craftingbookcategory = (CraftingBookCategory) buf.readEnum(CraftingBookCategory.class);
+            ShapedRecipePattern shapedrecipepattern = ShapedRecipePattern.fromNetwork(buf);
+            ItemStack itemstack = buf.readItem();
+            boolean flag = buf.readBoolean();
+
+            return new ShapedRecipe(s, craftingbookcategory, shapedrecipepattern, itemstack, flag);
         }
 
-        @Override
         public void toNetwork(FriendlyByteBuf buf, ShapedRecipe recipe) {
             buf.writeUtf(recipe.group);
             buf.writeEnum(recipe.category);
