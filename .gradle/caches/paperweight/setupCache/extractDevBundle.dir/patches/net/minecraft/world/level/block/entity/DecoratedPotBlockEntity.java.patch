--- a/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/DecoratedPotBlockEntity.java
@@ -21,7 +21,59 @@
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftLocation;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class DecoratedPotBlockEntity extends BlockEntity implements RandomizableContainer, ContainerSingleItem {
+
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new ArrayList<>();
+    private int maxStack = MAX_STACK;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return Arrays.asList(this.item);
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        this.transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        this.transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return this.transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+       return this.maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int i) {
+        this.maxStack = i;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (this.level == null) return null;
+        return CraftLocation.toBukkit(this.worldPosition, this.level.getWorld());
+    }
+    // CraftBukkit end
+
     public static final String TAG_SHERDS = "sherds";
     public static final String TAG_ITEM = "item";
     public static final int EVENT_POT_WOBBLES = 1;
@@ -29,13 +81,14 @@
     @Nullable
     public DecoratedPotBlockEntity.WobbleStyle lastWobbleStyle;
     public DecoratedPotBlockEntity.Decorations decorations;
-    private ItemStack item = ItemStack.EMPTY;
+    private ItemStack item;
     @Nullable
     protected ResourceLocation lootTable;
     protected long lootTableSeed;
 
     public DecoratedPotBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.DECORATED_POT, pos, state);
+        this.item = ItemStack.EMPTY;
         this.decorations = DecoratedPotBlockEntity.Decorations.EMPTY;
     }
 
@@ -74,7 +127,7 @@
     }
 
     public Direction getDirection() {
-        return this.getBlockState().getValue(BlockStateProperties.HORIZONTAL_FACING);
+        return (Direction) this.getBlockState().getValue(BlockStateProperties.HORIZONTAL_FACING);
     }
 
     public DecoratedPotBlockEntity.Decorations getDecorations() {
@@ -86,14 +139,15 @@
     }
 
     public ItemStack getPotAsItem() {
-        return createDecoratedPotItem(this.decorations);
+        return DecoratedPotBlockEntity.createDecoratedPotItem(this.decorations);
     }
 
     public static ItemStack createDecoratedPotItem(DecoratedPotBlockEntity.Decorations sherds) {
-        ItemStack itemStack = Items.DECORATED_POT.getDefaultInstance();
-        CompoundTag compoundTag = sherds.save(new CompoundTag());
-        BlockItem.setBlockEntityData(itemStack, BlockEntityType.DECORATED_POT, compoundTag);
-        return itemStack;
+        ItemStack itemstack = Items.DECORATED_POT.getDefaultInstance();
+        CompoundTag nbttagcompound = sherds.save(new CompoundTag());
+
+        BlockItem.setBlockEntityData(itemstack, BlockEntityType.DECORATED_POT, nbttagcompound);
+        return itemstack;
     }
 
     @Nullable
@@ -119,24 +173,25 @@
 
     @Override
     public ItemStack getTheItem() {
-        this.unpackLootTable((Player)null);
+        this.unpackLootTable((Player) null);
         return this.item;
     }
 
     @Override
     public ItemStack splitTheItem(int count) {
-        this.unpackLootTable((Player)null);
-        ItemStack itemStack = this.item.split(count);
+        this.unpackLootTable((Player) null);
+        ItemStack itemstack = this.item.split(count);
+
         if (this.item.isEmpty()) {
             this.item = ItemStack.EMPTY;
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
     public void setTheItem(ItemStack stack) {
-        this.unpackLootTable((Player)null);
+        this.unpackLootTable((Player) null);
         this.item = stack;
     }
 
@@ -163,17 +218,19 @@
     }
 
     public static record Decorations(Item back, Item left, Item right, Item front) {
+
         public static final DecoratedPotBlockEntity.Decorations EMPTY = new DecoratedPotBlockEntity.Decorations(Items.BRICK, Items.BRICK, Items.BRICK, Items.BRICK);
 
         public CompoundTag save(CompoundTag nbt) {
-            if (this.equals(EMPTY)) {
+            if (this.equals(DecoratedPotBlockEntity.Decorations.EMPTY)) {
                 return nbt;
             } else {
-                ListTag listTag = new ListTag();
-                this.sorted().forEach((sherd) -> {
-                    listTag.add(StringTag.valueOf(BuiltInRegistries.ITEM.getKey(sherd).toString()));
+                ListTag nbttaglist = new ListTag();
+
+                this.sorted().forEach((item) -> {
+                    nbttaglist.add(StringTag.valueOf(BuiltInRegistries.ITEM.getKey(item).toString()));
                 });
-                nbt.put("sherds", listTag);
+                nbt.put("sherds", nbttaglist);
                 return nbt;
             }
         }
@@ -184,10 +241,11 @@
 
         public static DecoratedPotBlockEntity.Decorations load(@Nullable CompoundTag nbt) {
             if (nbt != null && nbt.contains("sherds", 9)) {
-                ListTag listTag = nbt.getList("sherds", 8);
-                return new DecoratedPotBlockEntity.Decorations(itemFromTag(listTag, 0), itemFromTag(listTag, 1), itemFromTag(listTag, 2), itemFromTag(listTag, 3));
+                ListTag nbttaglist = nbt.getList("sherds", 8);
+
+                return new DecoratedPotBlockEntity.Decorations(itemFromTag(nbttaglist, 0), itemFromTag(nbttaglist, 1), itemFromTag(nbttaglist, 2), itemFromTag(nbttaglist, 3));
             } else {
-                return EMPTY;
+                return DecoratedPotBlockEntity.Decorations.EMPTY;
             }
         }
 
@@ -195,20 +253,21 @@
             if (index >= list.size()) {
                 return Items.BRICK;
             } else {
-                Tag tag = list.get(index);
-                return BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(tag.getAsString()));
+                Tag nbtbase = list.get(index);
+
+                return (Item) BuiltInRegistries.ITEM.get(ResourceLocation.tryParse(nbtbase.getAsString()));
             }
         }
     }
 
     public static enum WobbleStyle {
-        POSITIVE(7),
-        NEGATIVE(10);
+
+        POSITIVE(7), NEGATIVE(10);
 
         public final int duration;
 
-        private WobbleStyle(int lengthInTicks) {
-            this.duration = lengthInTicks;
+        private WobbleStyle(int i) {
+            this.duration = i;
         }
     }
 }
