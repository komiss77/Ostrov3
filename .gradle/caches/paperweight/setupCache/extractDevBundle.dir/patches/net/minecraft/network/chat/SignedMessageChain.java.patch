--- a/net/minecraft/network/chat/SignedMessageChain.java
+++ b/net/minecraft/network/chat/SignedMessageChain.java
@@ -35,16 +35,16 @@
         return (signature, body) -> {
             SignedMessageLink signedMessageLink = this.advanceLink();
             if (signedMessageLink == null) {
-                throw new SignedMessageChain.DecodeException(Component.translatable("chat.disabled.chain_broken"), false);
+                throw new SignedMessageChain.DecodeException(Component.translatable("chat.disabled.chain_broken"), false); // Paper - diff on change (if disconnects, need a new kick event cause)
             } else if (playerPublicKey.data().hasExpired()) {
-                throw new SignedMessageChain.DecodeException(Component.translatable("chat.disabled.expiredProfileKey"), false);
+                throw new SignedMessageChain.DecodeException(Component.translatable("chat.disabled.expiredProfileKey"), false, org.bukkit.event.player.PlayerKickEvent.Cause.EXPIRED_PROFILE_PUBLIC_KEY); // Paper - kick event causes
             } else if (body.timeStamp().isBefore(this.lastTimeStamp)) {
-                throw new SignedMessageChain.DecodeException(Component.translatable("multiplayer.disconnect.out_of_order_chat"), true);
+                throw new SignedMessageChain.DecodeException(Component.translatable("multiplayer.disconnect.out_of_order_chat"), true, org.bukkit.event.player.PlayerKickEvent.Cause.OUT_OF_ORDER_CHAT); // Paper - kick event causes
             } else {
                 this.lastTimeStamp = body.timeStamp();
                 PlayerChatMessage playerChatMessage = new PlayerChatMessage(signedMessageLink, signature, body, (Component)null, FilterMask.PASS_THROUGH);
                 if (!playerChatMessage.verify(signatureValidator)) {
-                    throw new SignedMessageChain.DecodeException(Component.translatable("multiplayer.disconnect.unsigned_chat"), true);
+                    throw new SignedMessageChain.DecodeException(Component.translatable("multiplayer.disconnect.unsigned_chat"), true, org.bukkit.event.player.PlayerKickEvent.Cause.UNSIGNED_CHAT); // Paper - kick event causes
                 } else {
                     if (playerChatMessage.hasExpiredServer(Instant.now())) {
                         LOGGER.warn("Received expired chat: '{}'. Is the client/server system time unsynchronized?", (Object)body.content());
@@ -68,10 +68,17 @@
 
     public static class DecodeException extends ThrowingComponent {
         private final boolean shouldDisconnect;
+        public final org.bukkit.event.player.PlayerKickEvent.Cause kickCause; // Paper - kick event causes
 
         public DecodeException(Component message, boolean shouldDisconnect) {
+            // Paper start - kick event causes
+            this(message, shouldDisconnect, org.bukkit.event.player.PlayerKickEvent.Cause.UNKNOWN);
+        }
+        public DecodeException(Component message, boolean shouldDisconnect, org.bukkit.event.player.PlayerKickEvent.Cause kickCause) {
+            // Paper end - kick event causes
             super(message);
             this.shouldDisconnect = shouldDisconnect;
+            this.kickCause = kickCause; // Paper - kick event causes
         }
 
         public boolean shouldDisconnect() {
