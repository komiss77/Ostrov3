--- a/net/minecraft/world/level/block/entity/SkullBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SkullBlockEntity.java
@@ -26,6 +26,7 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class SkullBlockEntity extends BlockEntity {
+
     public static final String TAG_SKULL_OWNER = "SkullOwner";
     public static final String TAG_NOTE_BLOCK_SOUND = "note_block_sound";
     @Nullable
@@ -33,7 +34,8 @@
     @Nullable
     private static LoadingCache<String, CompletableFuture<Optional<GameProfile>>> profileCache;
     private static final Executor CHECKED_MAIN_THREAD_EXECUTOR = (runnable) -> {
-        Executor executor = mainThreadExecutor;
+        Executor executor = SkullBlockEntity.mainThreadExecutor;
+
         if (executor != null) {
             executor.execute(runnable);
         }
@@ -51,42 +53,44 @@
     }
 
     public static void setup(final Services apiServices, Executor executor) {
-        mainThreadExecutor = executor;
-        final BooleanSupplier booleanSupplier = () -> {
-            return profileCache == null;
+        SkullBlockEntity.mainThreadExecutor = executor;
+        final BooleanSupplier booleansupplier = () -> {
+            return SkullBlockEntity.profileCache == null;
         };
-        profileCache = CacheBuilder.newBuilder().expireAfterAccess(Duration.ofMinutes(10L)).maximumSize(256L).build(new CacheLoader<String, CompletableFuture<Optional<GameProfile>>>() {
-            @Override
-            public CompletableFuture<Optional<GameProfile>> load(String string) {
-                return booleanSupplier.getAsBoolean() ? CompletableFuture.completedFuture(Optional.empty()) : SkullBlockEntity.loadProfile(string, apiServices, booleanSupplier);
+
+        SkullBlockEntity.profileCache = CacheBuilder.newBuilder().expireAfterAccess(Duration.ofMinutes(10L)).maximumSize(256L).build(new CacheLoader<String, CompletableFuture<Optional<GameProfile>>>() {
+            public CompletableFuture<Optional<GameProfile>> load(String s) {
+                return booleansupplier.getAsBoolean() ? CompletableFuture.completedFuture(Optional.empty()) : SkullBlockEntity.loadProfile(s, apiServices, booleansupplier);
             }
         });
     }
 
     public static void clear() {
-        mainThreadExecutor = null;
-        profileCache = null;
+        SkullBlockEntity.mainThreadExecutor = null;
+        SkullBlockEntity.profileCache = null;
     }
 
-    static CompletableFuture<Optional<GameProfile>> loadProfile(String name, Services apiServices, BooleanSupplier booleanSupplier) {
-        return apiServices.profileCache().getAsync(name).thenApplyAsync((profile) -> {
-            if (profile.isPresent() && !booleanSupplier.getAsBoolean()) {
-                UUID uUID = profile.get().getId();
-                ProfileResult profileResult = apiServices.sessionService().fetchProfile(uUID, true);
-                return profileResult != null ? Optional.ofNullable(profileResult.profile()) : profile;
+    static CompletableFuture<Optional<GameProfile>> loadProfile(String name, Services apiServices, BooleanSupplier booleansupplier) {
+        return apiServices.profileCache().getAsync(name).thenApplyAsync((optional) -> {
+            if (optional.isPresent() && !booleansupplier.getAsBoolean()) {
+                UUID uuid = ((GameProfile) optional.get()).getId();
+                ProfileResult profileresult = apiServices.sessionService() instanceof com.destroystokyo.paper.profile.PaperMinecraftSessionService paperMinecraftSessionService ? paperMinecraftSessionService.fetchProfile(optional.get(), true) : apiServices.sessionService().fetchProfile(uuid, true); // Paper - FillProfileEvent
+
+                return profileresult != null ? Optional.ofNullable(profileresult.profile()) : optional;
             } else {
                 return Optional.empty();
             }
-        }, Util.backgroundExecutor());
+        }, Util.PROFILE_EXECUTOR); // Paper - don't submit BLOCKING PROFILE LOOKUPS to the world gen thread
     }
 
     @Override
     protected void saveAdditional(CompoundTag nbt) {
         super.saveAdditional(nbt);
         if (this.owner != null) {
-            CompoundTag compoundTag = new CompoundTag();
-            NbtUtils.writeGameProfile(compoundTag, this.owner);
-            nbt.put("SkullOwner", compoundTag);
+            CompoundTag nbttagcompound1 = new CompoundTag();
+
+            NbtUtils.writeGameProfile(nbttagcompound1, this.owner);
+            nbt.put("SkullOwner", nbttagcompound1);
         }
 
         if (this.noteBlockSound != null) {
@@ -101,9 +105,10 @@
         if (nbt.contains("SkullOwner", 10)) {
             this.setOwner(NbtUtils.readGameProfile(nbt.getCompound("SkullOwner")));
         } else if (nbt.contains("ExtraType", 8)) {
-            String string = nbt.getString("ExtraType");
-            if (!StringUtil.isNullOrEmpty(string)) {
-                this.setOwner(new GameProfile(Util.NIL_UUID, string));
+            String s = nbt.getString("ExtraType");
+
+            if (!StringUtil.isNullOrEmpty(s)) {
+                this.setOwner(new GameProfile(Util.NIL_UUID, s));
             }
         }
 
@@ -114,7 +119,7 @@
     }
 
     public static void animation(Level world, BlockPos pos, BlockState state, SkullBlockEntity blockEntity) {
-        if (state.hasProperty(SkullBlock.POWERED) && state.getValue(SkullBlock.POWERED)) {
+        if (state.hasProperty(SkullBlock.POWERED) && (Boolean) state.getValue(SkullBlock.POWERED)) {
             blockEntity.isAnimating = true;
             ++blockEntity.animationTickCount;
         } else {
@@ -124,7 +129,7 @@
     }
 
     public float getAnimation(float tickDelta) {
-        return this.isAnimating ? (float)this.animationTickCount + tickDelta : (float)this.animationTickCount;
+        return this.isAnimating ? (float) this.animationTickCount + tickDelta : (float) this.animationTickCount;
     }
 
     @Nullable
@@ -148,7 +153,7 @@
     }
 
     public void setOwner(@Nullable GameProfile owner) {
-        synchronized(this) {
+        synchronized (this) {
             this.owner = owner;
         }
 
@@ -156,11 +161,11 @@
     }
 
     private void updateOwnerProfile() {
-        if (this.owner != null && !Util.isBlank(this.owner.getName()) && !hasTextures(this.owner)) {
-            fetchGameProfile(this.owner.getName()).thenAcceptAsync((profile) -> {
-                this.owner = profile.orElse(this.owner);
+        if (this.owner != null && !Util.isBlank(this.owner.getName()) && !SkullBlockEntity.hasTextures(this.owner)) {
+            SkullBlockEntity.fetchGameProfile(this.owner.getName()).thenAcceptAsync((optional) -> {
+                this.owner = (GameProfile) optional.orElse(this.owner);
                 this.setChanged();
-            }, CHECKED_MAIN_THREAD_EXECUTOR);
+            }, SkullBlockEntity.CHECKED_MAIN_THREAD_EXECUTOR);
         } else {
             this.setChanged();
         }
@@ -172,10 +177,11 @@
             return NbtUtils.readGameProfile(nbt.getCompound("SkullOwner"));
         } else {
             if (nbt.contains("SkullOwner", 8)) {
-                String string = nbt.getString("SkullOwner");
-                if (!Util.isBlank(string)) {
+                String s = nbt.getString("SkullOwner");
+
+                if (!Util.isBlank(s)) {
                     nbt.remove("SkullOwner");
-                    resolveGameProfile(nbt, string);
+                    SkullBlockEntity.resolveGameProfile(nbt, s);
                 }
             }
 
@@ -184,22 +190,34 @@
     }
 
     public static void resolveGameProfile(CompoundTag nbt) {
-        String string = nbt.getString("SkullOwner");
-        if (!Util.isBlank(string)) {
-            resolveGameProfile(nbt, string);
+        String s = nbt.getString("SkullOwner");
+
+        if (!Util.isBlank(s)) {
+            SkullBlockEntity.resolveGameProfile(nbt, s);
+            // CraftBukkit start
+        } else {
+            net.minecraft.nbt.ListTag textures = nbt.getCompound("SkullOwner").getCompound("Properties").getList("textures", 10); // Safe due to method contracts
+            for (int i = 0; i < textures.size(); i++) {
+                if (textures.get(i) instanceof CompoundTag && !((CompoundTag) textures.get(i)).contains("Signature", 8) && ((CompoundTag) textures.get(i)).getString("Value").trim().isEmpty()) {
+                    nbt.remove("SkullOwner");
+                    break;
+                }
+            }
+            // CraftBukkit end
         }
 
     }
 
     private static void resolveGameProfile(CompoundTag nbt, String name) {
-        fetchGameProfile(name).thenAccept((profile) -> {
-            nbt.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), profile.orElse(new GameProfile(Util.NIL_UUID, name))));
+        SkullBlockEntity.fetchGameProfile(name).thenAccept((optional) -> {
+            nbt.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), (GameProfile) optional.orElse(new GameProfile(Util.NIL_UUID, name))));
         });
     }
 
     private static CompletableFuture<Optional<GameProfile>> fetchGameProfile(String name) {
-        LoadingCache<String, CompletableFuture<Optional<GameProfile>>> loadingCache = profileCache;
-        return loadingCache != null && Player.isValidUsername(name) ? loadingCache.getUnchecked(name) : CompletableFuture.completedFuture(Optional.empty());
+        LoadingCache<String, CompletableFuture<Optional<GameProfile>>> loadingcache = SkullBlockEntity.profileCache;
+
+        return loadingcache != null && Player.isValidUsername(name) ? (CompletableFuture) loadingcache.getUnchecked(name) : CompletableFuture.completedFuture(Optional.empty());
     }
 
     private static boolean hasTextures(GameProfile profile) {
