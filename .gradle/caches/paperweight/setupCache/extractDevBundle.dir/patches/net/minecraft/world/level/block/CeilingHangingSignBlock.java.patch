--- a/net/minecraft/world/level/block/CeilingHangingSignBlock.java
+++ b/net/minecraft/world/level/block/CeilingHangingSignBlock.java
@@ -40,6 +40,7 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class CeilingHangingSignBlock extends SignBlock {
+
     public static final MapCodec<CeilingHangingSignBlock> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
         return instance.group(WoodType.CODEC.fieldOf("wood_type").forGetter(SignBlock::type), propertiesCodec()).apply(instance, CeilingHangingSignBlock::new);
     });
@@ -51,20 +52,23 @@
 
     @Override
     public MapCodec<CeilingHangingSignBlock> codec() {
-        return CODEC;
+        return CeilingHangingSignBlock.CODEC;
     }
 
     public CeilingHangingSignBlock(WoodType type, BlockBehaviour.Properties settings) {
         super(type, settings.sound(type.hangingSignSoundType()));
-        this.registerDefaultState(this.stateDefinition.any().setValue(ROTATION, Integer.valueOf(0)).setValue(ATTACHED, Boolean.valueOf(false)).setValue(WATERLOGGED, Boolean.valueOf(false)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CeilingHangingSignBlock.ROTATION, 0)).setValue(CeilingHangingSignBlock.ATTACHED, false)).setValue(CeilingHangingSignBlock.WATERLOGGED, false));
     }
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        BlockEntity itemStack = world.getBlockEntity(pos);
-        if (itemStack instanceof SignBlockEntity signBlockEntity) {
-            ItemStack itemStack = player.getItemInHand(hand);
-            if (this.shouldTryToChainAnotherHangingSign(player, hit, signBlockEntity, itemStack)) {
+        BlockEntity tileentity = world.getBlockEntity(pos);
+
+        if (tileentity instanceof SignBlockEntity) {
+            SignBlockEntity tileentitysign = (SignBlockEntity) tileentity;
+            ItemStack itemstack = player.getItemInHand(hand);
+
+            if (this.shouldTryToChainAnotherHangingSign(player, hit, tileentitysign, itemstack)) {
                 return InteractionResult.PASS;
             }
         }
@@ -83,35 +87,40 @@
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        Level level = ctx.getLevel();
-        FluidState fluidState = level.getFluidState(ctx.getClickedPos());
-        BlockPos blockPos = ctx.getClickedPos().above();
-        BlockState blockState = level.getBlockState(blockPos);
-        boolean bl = blockState.is(BlockTags.ALL_HANGING_SIGNS);
-        Direction direction = Direction.fromYRot((double)ctx.getRotation());
-        boolean bl2 = !Block.isFaceFull(blockState.getCollisionShape(level, blockPos), Direction.DOWN) || ctx.isSecondaryUseActive();
-        if (bl && !ctx.isSecondaryUseActive()) {
-            if (blockState.hasProperty(WallHangingSignBlock.FACING)) {
-                Direction direction2 = blockState.getValue(WallHangingSignBlock.FACING);
-                if (direction2.getAxis().test(direction)) {
-                    bl2 = false;
+        Level world = ctx.getLevel();
+        FluidState fluid = world.getFluidState(ctx.getClickedPos());
+        BlockPos blockposition = ctx.getClickedPos().above();
+        BlockState iblockdata = world.getBlockState(blockposition);
+        boolean flag = iblockdata.is(BlockTags.ALL_HANGING_SIGNS);
+        Direction enumdirection = Direction.fromYRot((double) ctx.getRotation());
+        boolean flag1 = !Block.isFaceFull(iblockdata.getCollisionShape(world, blockposition), Direction.DOWN) || ctx.isSecondaryUseActive();
+
+        if (flag && !ctx.isSecondaryUseActive()) {
+            if (iblockdata.hasProperty(WallHangingSignBlock.FACING)) {
+                Direction enumdirection1 = (Direction) iblockdata.getValue(WallHangingSignBlock.FACING);
+
+                if (enumdirection1.getAxis().test(enumdirection)) {
+                    flag1 = false;
                 }
-            } else if (blockState.hasProperty(ROTATION)) {
-                Optional<Direction> optional = RotationSegment.convertToDirection(blockState.getValue(ROTATION));
-                if (optional.isPresent() && optional.get().getAxis().test(direction)) {
-                    bl2 = false;
+            } else if (iblockdata.hasProperty(CeilingHangingSignBlock.ROTATION)) {
+                Optional<Direction> optional = RotationSegment.convertToDirection((Integer) iblockdata.getValue(CeilingHangingSignBlock.ROTATION));
+
+                if (optional.isPresent() && ((Direction) optional.get()).getAxis().test(enumdirection)) {
+                    flag1 = false;
                 }
             }
         }
 
-        int i = !bl2 ? RotationSegment.convertToSegment(direction.getOpposite()) : RotationSegment.convertToSegment(ctx.getRotation() + 180.0F);
-        return this.defaultBlockState().setValue(ATTACHED, Boolean.valueOf(bl2)).setValue(ROTATION, Integer.valueOf(i)).setValue(WATERLOGGED, Boolean.valueOf(fluidState.getType() == Fluids.WATER));
+        int i = !flag1 ? RotationSegment.convertToSegment(enumdirection.getOpposite()) : RotationSegment.convertToSegment(ctx.getRotation() + 180.0F);
+
+        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(CeilingHangingSignBlock.ATTACHED, flag1)).setValue(CeilingHangingSignBlock.ROTATION, i)).setValue(CeilingHangingSignBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        VoxelShape voxelShape = AABBS.get(state.getValue(ROTATION));
-        return voxelShape == null ? SHAPE : voxelShape;
+        VoxelShape voxelshape = (VoxelShape) CeilingHangingSignBlock.AABBS.get(state.getValue(CeilingHangingSignBlock.ROTATION));
+
+        return voxelshape == null ? CeilingHangingSignBlock.SHAPE : voxelshape;
     }
 
     @Override
@@ -126,22 +135,22 @@
 
     @Override
     public float getYRotationDegrees(BlockState state) {
-        return RotationSegment.convertToDegrees(state.getValue(ROTATION));
+        return RotationSegment.convertToDegrees((Integer) state.getValue(CeilingHangingSignBlock.ROTATION));
     }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return state.setValue(ROTATION, Integer.valueOf(rotation.rotate(state.getValue(ROTATION), 16)));
+        return (BlockState) state.setValue(CeilingHangingSignBlock.ROTATION, rotation.rotate((Integer) state.getValue(CeilingHangingSignBlock.ROTATION), 16));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.setValue(ROTATION, Integer.valueOf(mirror.mirror(state.getValue(ROTATION), 16)));
+        return (BlockState) state.setValue(CeilingHangingSignBlock.ROTATION, mirror.mirror((Integer) state.getValue(CeilingHangingSignBlock.ROTATION), 16));
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(ROTATION, ATTACHED, WATERLOGGED);
+        builder.add(CeilingHangingSignBlock.ROTATION, CeilingHangingSignBlock.ATTACHED, CeilingHangingSignBlock.WATERLOGGED);
     }
 
     @Override
@@ -152,6 +161,6 @@
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return createTickerHelper(type, BlockEntityType.HANGING_SIGN, SignBlockEntity::tick);
+        return null; // Craftbukkit - remove unnecessary sign ticking
     }
 }
