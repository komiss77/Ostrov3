--- a/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/JukeboxBlockEntity.java
@@ -22,16 +22,62 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.Collections;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
+
 public class JukeboxBlockEntity extends BlockEntity implements Clearable, ContainerSingleItem {
+
     private static final int SONG_END_PADDING = 20;
-    private ItemStack item = ItemStack.EMPTY;
+    private ItemStack item;
     private int ticksSinceLastEvent;
     public long tickCount;
     public long recordStartedTick;
     public boolean isPlaying;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    public boolean opened;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return Collections.singletonList(this.item);
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        this.transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        this.transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return this.transaction;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        this.maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        if (this.level == null) return null;
+        return new org.bukkit.Location(this.level.getWorld(), this.worldPosition.getX(), this.worldPosition.getY(), this.worldPosition.getZ());
+    }
+    // CraftBukkit end
 
     public JukeboxBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.JUKEBOX, pos, state);
+        this.item = ItemStack.EMPTY;
     }
 
     @Override
@@ -64,7 +110,7 @@
 
     private void setHasRecordBlockState(@Nullable Entity entity, boolean hasRecord) {
         if (this.level.getBlockState(this.getBlockPos()) == this.getBlockState()) {
-            this.level.setBlock(this.getBlockPos(), this.getBlockState().setValue(JukeboxBlock.HAS_RECORD, Boolean.valueOf(hasRecord)), 2);
+            this.level.setBlock(this.getBlockPos(), (BlockState) this.getBlockState().setValue(JukeboxBlock.HAS_RECORD, hasRecord), 2);
             this.level.gameEvent(GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
         }
 
@@ -75,7 +121,7 @@
         this.recordStartedTick = this.tickCount;
         this.isPlaying = true;
         this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
-        this.level.levelEvent((Player)null, 1010, this.getBlockPos(), Item.getId(this.getTheItem().getItem()));
+        this.level.levelEvent((Player) null, 1010, this.getBlockPos(), Item.getId(this.getTheItem().getItem()));
         this.setChanged();
     }
 
@@ -90,10 +136,12 @@
     private void tick(Level world, BlockPos pos, BlockState state) {
         ++this.ticksSinceLastEvent;
         if (this.isRecordPlaying()) {
-            Item var5 = this.getTheItem().getItem();
-            if (var5 instanceof RecordItem) {
-                RecordItem recordItem = (RecordItem)var5;
-                if (this.shouldRecordStopPlaying(recordItem)) {
+            Item item = this.getTheItem().getItem();
+
+            if (item instanceof RecordItem) {
+                RecordItem itemrecord = (RecordItem) item;
+
+                if (this.shouldRecordStopPlaying(itemrecord)) {
                     this.stopPlaying();
                 } else if (this.shouldSendJukeboxPlayingEvent()) {
                     this.ticksSinceLastEvent = 0;
@@ -107,7 +155,7 @@
     }
 
     private boolean shouldRecordStopPlaying(RecordItem musicDisc) {
-        return this.tickCount >= this.recordStartedTick + (long)musicDisc.getLengthInTicks() + 20L;
+        return this.tickCount >= this.recordStartedTick + (long) musicDisc.getLengthInTicks() + 20L;
     }
 
     private boolean shouldSendJukeboxPlayingEvent() {
@@ -121,21 +169,22 @@
 
     @Override
     public ItemStack splitTheItem(int count) {
-        ItemStack itemStack = this.item;
+        ItemStack itemstack = this.item;
+
         this.item = ItemStack.EMPTY;
-        if (!itemStack.isEmpty()) {
-            this.setHasRecordBlockState((Entity)null, false);
+        if (!itemstack.isEmpty()) {
+            this.setHasRecordBlockState((Entity) null, false);
             this.stopPlaying();
         }
 
-        return itemStack;
+        return itemstack;
     }
 
     @Override
     public void setTheItem(ItemStack stack) {
         if (stack.is(ItemTags.MUSIC_DISCS) && this.level != null) {
             this.item = stack;
-            this.setHasRecordBlockState((Entity)null, true);
+            this.setHasRecordBlockState((Entity) null, true);
             this.startPlaying();
         } else if (stack.isEmpty()) {
             this.splitTheItem(1);
@@ -145,7 +194,7 @@
 
     @Override
     public int getMaxStackSize() {
-        return 1;
+        return this.maxStack; // CraftBukkit
     }
 
     @Override
@@ -164,25 +213,29 @@
     }
 
     private void spawnMusicParticles(Level world, BlockPos pos) {
-        if (world instanceof ServerLevel serverLevel) {
-            Vec3 vec3 = Vec3.atBottomCenterOf(pos).add(0.0D, (double)1.2F, 0.0D);
-            float f = (float)world.getRandom().nextInt(4) / 24.0F;
-            serverLevel.sendParticles(ParticleTypes.NOTE, vec3.x(), vec3.y(), vec3.z(), 0, (double)f, 0.0D, 0.0D, 1.0D);
+        if (world instanceof ServerLevel) {
+            ServerLevel worldserver = (ServerLevel) world;
+            Vec3 vec3d = Vec3.atBottomCenterOf(pos).add(0.0D, 1.2000000476837158D, 0.0D);
+            float f = (float) world.getRandom().nextInt(4) / 24.0F;
+
+            worldserver.sendParticles(ParticleTypes.NOTE, vec3d.x(), vec3d.y(), vec3d.z(), 0, (double) f, 0.0D, 0.0D, 1.0D);
         }
 
     }
 
     public void popOutRecord() {
         if (this.level != null && !this.level.isClientSide) {
-            BlockPos blockPos = this.getBlockPos();
-            ItemStack itemStack = this.getTheItem();
-            if (!itemStack.isEmpty()) {
+            BlockPos blockposition = this.getBlockPos();
+            ItemStack itemstack = this.getTheItem();
+
+            if (!itemstack.isEmpty()) {
                 this.removeTheItem();
-                Vec3 vec3 = Vec3.atLowerCornerWithOffset(blockPos, 0.5D, 1.01D, 0.5D).offsetRandom(this.level.random, 0.7F);
-                ItemStack itemStack2 = itemStack.copy();
-                ItemEntity itemEntity = new ItemEntity(this.level, vec3.x(), vec3.y(), vec3.z(), itemStack2);
-                itemEntity.setDefaultPickUpDelay();
-                this.level.addFreshEntity(itemEntity);
+                Vec3 vec3d = Vec3.atLowerCornerWithOffset(blockposition, 0.5D, 1.01D, 0.5D).offsetRandom(this.level.random, 0.7F);
+                ItemStack itemstack1 = itemstack.copy();
+                ItemEntity entityitem = new ItemEntity(this.level, vec3d.x(), vec3d.y(), vec3d.z(), itemstack1);
+
+                entityitem.setDefaultPickUpDelay();
+                this.level.addFreshEntity(entityitem);
             }
         }
     }
@@ -194,7 +247,11 @@
     @VisibleForTesting
     public void setRecordWithoutPlaying(ItemStack stack) {
         this.item = stack;
-        this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+        // CraftBukkit start - add null check for level
+        if (this.level != null) {
+            this.level.updateNeighborsAt(this.getBlockPos(), this.getBlockState().getBlock());
+        }
+        // CraftBukkit end
         this.setChanged();
     }
 }
