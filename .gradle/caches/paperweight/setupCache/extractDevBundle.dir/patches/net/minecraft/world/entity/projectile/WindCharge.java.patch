--- a/net/minecraft/world/entity/projectile/WindCharge.java
+++ b/net/minecraft/world/entity/projectile/WindCharge.java
@@ -23,6 +23,7 @@
 import net.minecraft.world.phys.HitResult;
 
 public class WindCharge extends AbstractHurtingProjectile implements ItemSupplier {
+
     public static final WindCharge.WindChargeExplosionDamageCalculator EXPLOSION_DAMAGE_CALCULATOR = new WindCharge.WindChargeExplosionDamageCalculator();
 
     public WindCharge(EntityType<? extends WindCharge> type, Level world) {
@@ -37,9 +38,10 @@
     @Override
     protected AABB makeBoundingBox() {
         float f = this.getType().getDimensions().width / 2.0F;
-        float g = this.getType().getDimensions().height;
-        float h = 0.15F;
-        return new AABB(this.position().x - (double)f, this.position().y - (double)0.15F, this.position().z - (double)f, this.position().x + (double)f, this.position().y - (double)0.15F + (double)g, this.position().z + (double)f);
+        float f1 = this.getType().getDimensions().height;
+        float f2 = 0.15F;
+
+        return new AABB(this.position().x - (double) f, this.position().y - 0.15000000596046448D, this.position().z - (double) f, this.position().x + (double) f, this.position().y - 0.15000000596046448D + (double) f1, this.position().z + (double) f);
     }
 
     @Override
@@ -61,24 +63,26 @@
     protected void onHitEntity(EntityHitResult entityHitResult) {
         super.onHitEntity(entityHitResult);
         if (!this.level().isClientSide) {
-            Entity var10000 = entityHitResult.getEntity();
-            DamageSources var10001 = this.damageSources();
-            Entity var3 = this.getOwner();
-            LivingEntity var10003;
-            if (var3 instanceof LivingEntity) {
-                LivingEntity livingEntity = (LivingEntity)var3;
-                var10003 = livingEntity;
+            Entity entity = entityHitResult.getEntity();
+            DamageSources damagesources = this.damageSources();
+            Entity entity1 = this.getOwner();
+            LivingEntity entityliving;
+
+            if (entity1 instanceof LivingEntity) {
+                LivingEntity entityliving1 = (LivingEntity) entity1;
+
+                entityliving = entityliving1;
             } else {
-                var10003 = null;
+                entityliving = null;
             }
 
-            var10000.hurt(var10001.mobProjectile(this, var10003), 1.0F);
+            entity.hurt(damagesources.mobProjectile(this, entityliving), 1.0F);
             this.explode();
         }
     }
 
-    private void explode() {
-        this.level().explode(this, (DamageSource)null, EXPLOSION_DAMAGE_CALCULATOR, this.getX(), this.getY(), this.getZ(), (float)(3.0D + this.random.nextDouble()), false, Level.ExplosionInteraction.BLOW, ParticleTypes.GUST, ParticleTypes.GUST_EMITTER, SoundEvents.WIND_BURST);
+    public void explode() { // PAIL private -> public
+        this.level().explode(this, (DamageSource) null, WindCharge.EXPLOSION_DAMAGE_CALCULATOR, this.getX(), this.getY(), this.getZ(), (float) (3.0D + this.random.nextDouble()), false, Level.ExplosionInteraction.BLOW, ParticleTypes.GUST, ParticleTypes.GUST_EMITTER, SoundEvents.WIND_BURST);
     }
 
     @Override
@@ -129,6 +133,9 @@
     }
 
     public static final class WindChargeExplosionDamageCalculator extends ExplosionDamageCalculator {
+
+        public WindChargeExplosionDamageCalculator() {}
+
         @Override
         public boolean shouldDamageEntity(Explosion explosion, Entity entity) {
             return false;
