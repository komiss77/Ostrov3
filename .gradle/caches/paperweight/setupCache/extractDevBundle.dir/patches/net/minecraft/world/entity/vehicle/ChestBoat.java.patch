--- a/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -4,6 +4,7 @@
 import net.minecraft.core.NonNullList;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.Container;
 import net.minecraft.world.Containers;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -23,23 +24,35 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
+
 public class ChestBoat extends Boat implements HasCustomInventoryScreen, ContainerEntity {
+
     private static final int CONTAINER_SIZE = 27;
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+    private NonNullList<ItemStack> itemStacks;
     @Nullable
     private ResourceLocation lootTable;
     private long lootTableSeed;
 
     public ChestBoat(EntityType<? extends Boat> type, Level world) {
         super(type, world);
+        this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
     }
 
-    public ChestBoat(Level world, double d, double e, double f) {
+    public ChestBoat(Level world, double d0, double d1, double d2) {
         super(EntityType.CHEST_BOAT, world);
-        this.setPos(d, e, f);
-        this.xo = d;
-        this.yo = e;
-        this.zo = f;
+        this.itemStacks = NonNullList.withSize(27, ItemStack.EMPTY);
+        this.setPos(d0, d1, d2);
+        this.xo = d0;
+        this.yo = d1;
+        this.zo = d2;
     }
 
     @Override
@@ -55,12 +68,14 @@
     @Override
     protected void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
+        this.lootableData.saveNbt(nbt); // Paper
         this.addChestVehicleSaveData(nbt);
     }
 
     @Override
     protected void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
+        this.lootableData.loadNbt(nbt); // Paper
         this.readChestVehicleSaveData(nbt);
     }
 
@@ -72,11 +87,18 @@
 
     @Override
     public void remove(Entity.RemovalReason reason) {
-        if (!this.level().isClientSide && reason.shouldDestroy()) {
-            Containers.dropContents(this.level(), this, this);
+        // CraftBukkit start - add Bukkit remove cause
+        this.remove(reason, null);
+    }
+
+    @Override
+    public void remove(Entity.RemovalReason entity_removalreason, EntityRemoveEvent.Cause cause) {
+        // CraftBukkit end
+        if (!this.level().isClientSide && entity_removalreason.shouldDestroy()) {
+            Containers.dropContents(this.level(), (Entity) this, (Container) this);
         }
 
-        super.remove(reason);
+        super.remove(entity_removalreason, cause); // CraftBukkit - add Bukkit remove cause
     }
 
     @Override
@@ -84,13 +106,14 @@
         if (this.canAddPassenger(player) && !player.isSecondaryUseActive()) {
             return super.interact(player, hand);
         } else {
-            InteractionResult interactionResult = this.interactWithContainerVehicle(player);
-            if (interactionResult.consumesAction()) {
+            InteractionResult enuminteractionresult = this.interactWithContainerVehicle(player);
+
+            if (enuminteractionresult.consumesAction()) {
                 this.gameEvent(GameEvent.CONTAINER_OPEN, player);
                 PiglinAi.angerNearbyPiglins(player, true);
             }
 
-            return interactionResult;
+            return enuminteractionresult;
         }
     }
 
@@ -106,37 +129,38 @@
 
     @Override
     public Item getDropItem() {
-        Item var10000;
+        Item item;
+
         switch (this.getVariant()) {
             case SPRUCE:
-                var10000 = Items.SPRUCE_CHEST_BOAT;
+                item = Items.SPRUCE_CHEST_BOAT;
                 break;
             case BIRCH:
-                var10000 = Items.BIRCH_CHEST_BOAT;
+                item = Items.BIRCH_CHEST_BOAT;
                 break;
             case JUNGLE:
-                var10000 = Items.JUNGLE_CHEST_BOAT;
+                item = Items.JUNGLE_CHEST_BOAT;
                 break;
             case ACACIA:
-                var10000 = Items.ACACIA_CHEST_BOAT;
+                item = Items.ACACIA_CHEST_BOAT;
                 break;
             case CHERRY:
-                var10000 = Items.CHERRY_CHEST_BOAT;
+                item = Items.CHERRY_CHEST_BOAT;
                 break;
             case DARK_OAK:
-                var10000 = Items.DARK_OAK_CHEST_BOAT;
+                item = Items.DARK_OAK_CHEST_BOAT;
                 break;
             case MANGROVE:
-                var10000 = Items.MANGROVE_CHEST_BOAT;
+                item = Items.MANGROVE_CHEST_BOAT;
                 break;
             case BAMBOO:
-                var10000 = Items.BAMBOO_CHEST_RAFT;
+                item = Items.BAMBOO_CHEST_RAFT;
                 break;
             default:
-                var10000 = Items.OAK_CHEST_BOAT;
+                item = Items.OAK_CHEST_BOAT;
         }
 
-        return var10000;
+        return item;
     }
 
     @Override
@@ -175,8 +199,7 @@
     }
 
     @Override
-    public void setChanged() {
-    }
+    public void setChanged() {}
 
     @Override
     public boolean stillValid(Player player) {
@@ -231,6 +254,67 @@
 
     @Override
     public void stopOpen(Player player) {
-        this.level().gameEvent(GameEvent.CONTAINER_CLOSE, this.position(), GameEvent.Context.of(player));
+        this.level().gameEvent(GameEvent.CONTAINER_CLOSE, this.position(), GameEvent.Context.of((Entity) player));
+    }
+
+    // Paper start
+    {
+        this.lootableData = new com.destroystokyo.paper.loottable.PaperLootableInventoryData(new com.destroystokyo.paper.loottable.PaperContainerEntityLootableInventory(this));
+    }
+    @Override
+    public Entity getEntity() {
+        return this;
+    }
+
+    @Override
+    public com.destroystokyo.paper.loottable.PaperLootableInventoryData getLootableData() {
+        return this.lootableData;
+    }
+    // Paper end
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    @Override
+    public List<ItemStack> getContents() {
+        return this.itemStacks;
+    }
+
+    @Override
+    public void onOpen(CraftHumanEntity who) {
+        this.transaction.add(who);
+    }
+
+    @Override
+    public void onClose(CraftHumanEntity who) {
+        this.transaction.remove(who);
+    }
+
+    @Override
+    public List<HumanEntity> getViewers() {
+        return this.transaction;
+    }
+
+    @Override
+    public InventoryHolder getOwner() {
+        org.bukkit.entity.Entity entity = this.getBukkitEntity();
+        if (entity instanceof InventoryHolder) return (InventoryHolder) entity;
+        return null;
     }
+
+    @Override
+    public int getMaxStackSize() {
+        return this.maxStack;
+    }
+
+    @Override
+    public void setMaxStackSize(int size) {
+        this.maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return this.getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
 }
