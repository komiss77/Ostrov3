--- a/net/minecraft/server/ServerAdvancementManager.java
+++ b/net/minecraft/server/ServerAdvancementManager.java
@@ -1,6 +1,8 @@
+// mc-dev import
 package net.minecraft.server;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.Multimap;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -9,6 +11,7 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.JsonOps;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.Map;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
@@ -27,6 +30,7 @@
 import org.slf4j.Logger;
 
 public class ServerAdvancementManager extends SimpleJsonResourceReloadListener {
+
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final Gson GSON = (new GsonBuilder()).create();
     public Map<ResourceLocation, AdvancementHolder> advancements = Map.of();
@@ -34,52 +38,69 @@
     private final LootDataManager lootData;
 
     public ServerAdvancementManager(LootDataManager conditionManager) {
-        super(GSON, "advancements");
+        super(ServerAdvancementManager.GSON, "advancements");
         this.lootData = conditionManager;
     }
 
-    @Override
     protected void apply(Map<ResourceLocation, JsonElement> prepared, ResourceManager manager, ProfilerFiller profiler) {
-        ImmutableMap.Builder<ResourceLocation, AdvancementHolder> builder = ImmutableMap.builder();
-        prepared.forEach((id, json) -> {
+        Builder<ResourceLocation, AdvancementHolder> builder = ImmutableMap.builder();
+
+        prepared.forEach((minecraftkey, jsonelement) -> {
+            // Spigot start
+            if (org.spigotmc.SpigotConfig.disabledAdvancements != null && (org.spigotmc.SpigotConfig.disabledAdvancements.contains("*") || org.spigotmc.SpigotConfig.disabledAdvancements.contains(minecraftkey.toString()) || org.spigotmc.SpigotConfig.disabledAdvancements.contains(minecraftkey.getNamespace()))) {
+                return;
+            }
+            // Spigot end
+
             try {
-                Advancement advancement = Util.getOrThrow(Advancement.CODEC.parse(JsonOps.INSTANCE, json), JsonParseException::new);
-                this.validate(id, advancement);
-                builder.put(id, new AdvancementHolder(id, advancement));
-            } catch (Exception var5) {
-                LOGGER.error("Parsing error loading custom advancement {}: {}", id, var5.getMessage());
+                Advancement advancement = (Advancement) Util.getOrThrow(Advancement.CODEC.parse(JsonOps.INSTANCE, jsonelement), JsonParseException::new);
+
+                this.validate(minecraftkey, advancement);
+                builder.put(minecraftkey, new AdvancementHolder(minecraftkey, advancement));
+            } catch (Exception exception) {
+                ServerAdvancementManager.LOGGER.error("Parsing error loading custom advancement {}: {}", minecraftkey, exception.getMessage());
             }
 
         });
         this.advancements = builder.buildOrThrow();
-        AdvancementTree advancementTree = new AdvancementTree();
-        advancementTree.addAll(this.advancements.values());
+        AdvancementTree advancementtree = new AdvancementTree();
 
-        for(AdvancementNode advancementNode : advancementTree.roots()) {
-            if (advancementNode.holder().value().display().isPresent()) {
-                TreeNodePosition.run(advancementNode);
+        advancementtree.addAll(this.advancements.values());
+        LOGGER.info("Loaded {} advancements", advancementtree.nodes().size()); // Paper - Improve logging and errors; moved from AdvancementTree#addAll
+        Iterator iterator = advancementtree.roots().iterator();
+
+        while (iterator.hasNext()) {
+            AdvancementNode advancementnode = (AdvancementNode) iterator.next();
+
+            if (advancementnode.holder().value().display().isPresent()) {
+                TreeNodePosition.run(advancementnode);
             }
         }
 
-        this.tree = advancementTree;
+        this.tree = advancementtree;
     }
 
     private void validate(ResourceLocation id, Advancement advancement) {
-        ProblemReporter.Collector collector = new ProblemReporter.Collector();
-        advancement.validate(collector, this.lootData);
-        Multimap<String, String> multimap = collector.get();
+        ProblemReporter.Collector problemreporter_a = new ProblemReporter.Collector();
+
+        advancement.validate(problemreporter_a, this.lootData);
+        Multimap<String, String> multimap = problemreporter_a.get();
+
         if (!multimap.isEmpty()) {
-            String string = multimap.asMap().entrySet().stream().map((entry) -> {
-                return "  at " + (String)entry.getKey() + ": " + String.join("; ", entry.getValue());
+            String s = (String) multimap.asMap().entrySet().stream().map((entry) -> {
+                String s1 = (String) entry.getKey();
+
+                return "  at " + s1 + ": " + String.join("; ", (Iterable) entry.getValue());
             }).collect(Collectors.joining("\n"));
-            LOGGER.warn("Found validation problems in advancement {}: \n{}", id, string);
+
+            ServerAdvancementManager.LOGGER.warn("Found validation problems in advancement {}: \n{}", id, s);
         }
 
     }
 
     @Nullable
     public AdvancementHolder get(ResourceLocation id) {
-        return this.advancements.get(id);
+        return (AdvancementHolder) this.advancements.get(id);
     }
 
     public AdvancementTree tree() {
